<%- layout('./layouts/boilerplate.ejs') %>

<main class="p-3 max-w-4xl mx-auto">
  <h1 class="text-3xl font-semibold text-center my-7">Update a Property</h1>
  <form
    id="property-form"
    class="flex flex-col sm:flex-row gap-4"
    action="/property/update-property/<%= property._id %>"
    method="POST"
    enctype="multipart/form-data"
  >
    <div class="flex flex-col gap-4 flex-1">
      <input
        type="text"
        name="name"
        placeholder="Name"
        class="border p-3 rounded-lg"
        maxlength="62"
        minlength="10"
        required
        value="<%= property.name %>"
      />
      <textarea
        name="description"
        placeholder="Description"
        class="border p-3 rounded-lg"
        required
        minlength="4"
        ><%= property.description %></textarea>
      <input
        type="text"
        name="address"
        placeholder="Address"
        class="border p-3 rounded-lg"
        required
        value="<%= property.address %>"
      />
      <div class="flex gap-6 flex-wrap">
        <div class="flex items-center gap-2">
          <label class="font-semibold">Type:</label>
          <select name="type" class="border rounded-lg p-3">
            <option value="rent" <%= property.type == 'rent' ? 'selected' : '' %>>Rent</option>
            <option value="sale" <%= property.type == 'sale' ? 'selected' : '' %>>Sale</option>
          </select>          
        </div>
        <div class="flex items-center gap-2">
          <label class="font-semibold">Amenities:</label>
          <select
            id="amenities"
            name="amenities"
            class="border rounded-lg p-3 max-w-[400px] min-w-[200px] h-[70px]"
            multiple
          >
            <option value="parking" <% property.parking ? 'selected' : '' %>>Parking</option>
            <option value="furnished" <% property.furnished ? 'selected' : '' %>>Furnished</option>
          </select>
        </div>
        <div class="flex gap-2">
          <input type="checkbox" name="offer" id="offer" class="w-5"  <% property.offer =='true' ? 'checked' : '' %>/>
          <label for="offer" class="self-center">Offer</label>
        </div>
      </div>
      <div class="flex flex-wrap gap-6">
        <div class="flex items-center gap-2">
          <input
            type="number"
            name="bedrooms"
            min="1"
            max="10"
            required
            class="p-3 border border-gray-300 rounded-lg"
            value="<%= property.bedrooms %>"
          />
          <p>Beds</p>
        </div>
        <div class="flex items-center gap-2">
          <input
            type="number"
            name="bathrooms"
            min="1"
            max="10"
            required
            class="p-3 border border-gray-300 rounded-lg"
            value="<%= property.bathrooms %>"
          />
          <p>Baths</p>
        </div>
        <div class="flex items-center gap-2">
          <input
            type="number"
            name="regularPrice"
            min="50"
            max="10000000"
            required
            class="p-3 border border-gray-300 rounded-lg"
            value="<%= property.regularPrice %>"
          />
          <div class="flex flex-col items-center">
            <p>Regular price</p>
          </div>
        </div>
        <div
          class="flex items-center gap-2"
          id="discount-price-container"
          style="display: none"
        >
          <input
            type="number"
            name="discountPrice"
            min="0"
            max="10000000"
            required
            value="<%= property.discountPrice %>"
            class="p-3 border border-gray-300 rounded-lg"

          />
          <div class="flex flex-col items-center">
            <p>Discounted price</p>
          </div>
        </div>
      </div>
    </div>
    <div class="flex flex-col flex-1 gap-4 sm:w-1/2">
      <p class="font-semibold">
        Images:
        <span class="font-normal text-gray-600 ml-2"
          >The first image will be the cover (max 6)</span
        >
      </p>
      <div class="flex gap-4 flex-row">
        <label
          for="images"
          class="p-3 text-green-700 border border-green-700 rounded uppercase hover:shadow-lg"
        >
          <input
            type="file"
            id="images"
            name="images"
            class="hidden"
            accept="image/*"
            multiple
          />
          Add Images
        </label>
      </div>
      <p id="image-upload-error" class="text-red-700 text-sm"></p>
      <div id="carousel-container" class="carousel-container"></div>
      <button
        type="submit"
        class="p-3 bg-slate-700 text-white rounded-lg uppercase hover:opacity-95 hover:shadow-lg"
      >
        Update Property
      </button>
      <p id="form-error" class="text-red-700 text-sm"></p>
    </div>
  </form>
</main>

<script src="https://cdnjs.cloudflare.com/ajax/libs/react-multi-carousel/2.6.4/react-multi-carousel.min.js"></script>
<script>
  document.getElementById("offer").addEventListener("change", function () {
    document.getElementById("discount-price-container").style.display = this
      .checked
      ? "flex"
      : "none";
  });

  document.getElementById("images").addEventListener("change", function (e) {
    const files = Array.from(e.target.files);
    const maxFiles = 6;
    if (files.length > maxFiles) {
      document.getElementById("image-upload-error").textContent =
        "You can only upload 6 images per property";
      return;
    }

    const container = document.getElementById("carousel-container");
    container.innerHTML = "";
    files.forEach((file, index) => {
      const reader = new FileReader();
      reader.onload = function (event) {
        const div = document.createElement("div");
        div.className = "w-full relative";
        div.innerHTML = `
            <img src="${event.target.result}" alt="" class="h-[230px] w-full rounded-3xl overflow-hidden object-cover">
          `;
        container.appendChild(div);
      };
      reader.readAsDataURL(file);
    });
  });

  async function handleImageSubmit(files) {
    const promises = files.map((file) => storeImage(file));
    const urls = await Promise.all(promises);
    return urls;
  }
  function storeImage(file) {
    return new Promise((resolve, reject) => {
      const data = new FormData();
      data.append("file", file);
      data.append("upload_preset", "ProfilePictures");
      data.append("cloud_name", "dhk5vhnp4");

      fetch("https://api.cloudinary.com/v1_1/dhk5vhnp4/image/upload", {
        method: "POST",
        body: data,
      })
        .then((response) => response.json())
        .then((data) => resolve(data.secure_url))
        .catch((err) => reject(err));
    });
  }

  document
    .getElementById("property-form")
    .addEventListener("submit", async function (e) {
      e.preventDefault();
      const form = e.target;
      const formData = new FormData(form);

      const files = Array.from(document.getElementById("images").files);
      const images = await handleImageSubmit(files);
      formData.delete("images");
      formData.delete("amenities");
      formData.set("imageUrls", images);

      const selectedAmenities = Array.from(
        document.getElementById("amenities").selectedOptions
      ).map((option) => option.value);
      if (selectedAmenities.includes("parking")) {
        formData.append("parking", true);
      } else {
        formData.append("parking", false);
      }
      if (selectedAmenities.includes("furnished")) {
        formData.append("furnished", true);
      } else {
        formData.append("furnished", false);
      }

      if (formData.get("offer") === "on") {
        formData.set("offer", true);
      } else {
        formData.set("offer", false);
      }

      console.log("FormData contents before sending:");
      for (const [key, value] of formData.entries()) {
        console.log(key, value);
      }

      const formObject = {};
      formData.forEach((value, key) => {
        formObject[key] = value;
      });

      fetch(form.action, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formObject),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.error) {
            document.getElementById("form-error").textContent = data.error;
          } else {
            
          }
        })
        .catch((err) => console.error(err));
    });
</script>
